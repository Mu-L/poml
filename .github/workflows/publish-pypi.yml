name: PyPI Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0, v1.2.3, etc.
  workflow_dispatch:  # Allow manual trigger

jobs:
  check-version:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      tag_version: ${{ steps.get_tag.outputs.tag_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from pyproject.toml
        id: get_version
        run: |
          VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Package version: $VERSION"

      - name: Get tag version
        id: get_tag
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          echo "tag_version=$TAG_VERSION" >> $GITHUB_OUTPUT
          echo "Tag version: $TAG_VERSION"

      - name: Verify version matches tag
        run: |
          if [ "${{ steps.get_version.outputs.version }}" != "${{ steps.get_tag.outputs.tag_version }}" ]; then
            echo "Error: Version in pyproject.toml (${{ steps.get_version.outputs.version }}) does not match tag (${{ steps.get_tag.outputs.tag_version }})"
            exit 1
          fi
          echo "Version check passed!"

  publish-to-test-pypi:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            wheel_platform: manylinux_2_17_x86_64
          - os: ubuntu-24.04-arm
            wheel_platform: manylinux_2_17_aarch64
          - os: windows-latest
            wheel_platform: win_amd64
          - os: macos-13
            wheel_platform: macosx_10_9_x86_64
          - os: macos-latest
            wheel_platform: macosx_11_0_arm64

    runs-on: ${{ matrix.os }}

    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: 'npm'
      - name: Use Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - run: npm ci
      - run: npm run build-webview
      - run: npm run build-cli
      - run: python -m pip install -e .[dev]

      - name: Build package
        run: hatch build -t wheel

      - name: Verify package contents
        run: |
          python -m zipfile -l dist/*.whl

      - name: Rename wheel for platform
        id: rename-wheel
        shell: bash
        run: |
          WHEEL_FILE=$(find dist -name "*.whl" -type f | head -1)
          if [ -z "$WHEEL_FILE" ]; then
            echo "No wheel file found!"
            exit 1
          fi
          echo "Original wheel: $WHEEL_FILE"
          
          # Parse the original wheel filename to extract components
          WHEEL_NAME=$(basename "$WHEEL_FILE" .whl)
          
          # Split wheel name into components: name-version-python_tag-abi_tag-platform_tag
          IFS='-' read -ra PARTS <<< "$WHEEL_NAME"
          
          if [ ${#PARTS[@]} -ge 5 ]; then
            DIST_NAME="${PARTS[0]}"
            VERSION="${PARTS[1]}"
            PYTHON_TAG="${PARTS[2]}"
            ABI_TAG="${PARTS[3]}"
            # Join remaining parts as platform tag
            PLATFORM_TAG=$(IFS='-'; echo "${PARTS[*]:4}")
          else
            echo "Warning: Unexpected wheel filename format: $WHEEL_NAME"
            exit 1
          fi
          
          # Create platform-specific wheel name
          PLATFORM_WHEEL="${DIST_NAME}-${VERSION}-${PYTHON_TAG}-${ABI_TAG}-${{ matrix.wheel_platform }}.whl"
          echo "Platform-specific wheel: $PLATFORM_WHEEL"
          
          # Rename the wheel file
          mv "$WHEEL_FILE" "dist/$PLATFORM_WHEEL"
          echo "wheel-file=dist/$PLATFORM_WHEEL" >> $GITHUB_OUTPUT

      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.wheel_platform }}
          path: ${{ steps.rename-wheel.outputs.wheel-file }}
          compression-level: 0

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

      - name: Test installation from PyPI
        run: |
          # Wait a bit for the package to be available
          sleep 30
          pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ agentlightning
          python -c "import poml; print('Package installed successfully')"
